/*
 *  This build script should remain as is. It should work standalone
 *  without additional configuration. If not, please contact the author.
 */

apply plugin: 'base'

version = '1.8.2'
// Project wide variables

project.ext {
    maltcms_major=1
    maltcms_minor=3
    //maltcms_micro=0
    maltcms_suffix="-SNAPSHOT"
    //maltcms_mmms="${maltcms_major}.${maltcms_minor}.${maltcms_micro}${maltcms_suffix}"
    maltcms_mmms="${maltcms_major}.${maltcms_minor}${maltcms_suffix}"
    maltcms_version="maltcms-${maltcms_mmms}"
    maltcms_dir="${maltcms_version}"
    maltcms_zip="${maltcms_version}-bin.zip"
//below is the original build version of the maltcms release used for the evaluation
    //https://maltcms.de/artifactory/libs-snapshot-local/net/sf/maltcms/maltcms-distribution/1.3-SNAPSHOT/maltcms-distribution-1.3-20130610.141219-71.zip
    maltcms_filename="maltcms-distribution-1.3-20130909.102417-107.zip"
    maltcms_download="https://github.com/nilshoffmann/maltcms-evaluation/releases/download/assets-v1.0.0/${maltcms_filename}"
    groovy_version="2.4.13"
    groovy_dir="groovy-${groovy_version}"
    groovy_zip="apache-groovy-binary-${groovy_version}.zip"
    groovy_download="https://dl.bintray.com/groovy/maven/${groovy_zip}"
    assets_download="https://github.com/nilshoffmann/maltcms-evaluation/releases/download/assets-v1.0.0/"
    assets_dir="build/assets"
    assets=["swpa-1.0.0","mspa-1.0.1","guineu-1.0.0","chlamy-1.0.0"]
}

repositories {
        mavenCentral()
}

task getAssets() {
    doLast {
        description = 'Fetches assets from sourceforge.'
        new File("${assets_dir}").mkdirs()
        assets.each{ 
            asset -> 
                def assetFile = new File("${assets_dir}/${asset}")
                if(assetFile.exists()) {
                    println "Directory '${assetFile}' exists, skipping download! (Delete '${assetFile}' manually to force download)"
                }else{
                    println "Downloading ${asset}.zip"
                    ant.get(
                        src:"${assets_download}/${asset}.zip",
                        dest:"${assets_dir}/${asset}.zip",
                        skipexisting:true
                    )
                    println "Extracting ${asset}.zip"
                    ant.unzip(
                        src:"${assets_dir}/${asset}.zip",
                        dest:"${assets_dir}/",
                        overwrite:false
                    )
                    ant.delete(
                        file:"${assets_dir}/${asset}.zip"
                    )
                }
        }
    }
}

task dist(type: Zip) {
    description = 'Creates a custom distribution for BiPACE2D evaluation.'
    archiveName = "BiPACE2D-evaluation-src.zip"
    into("") {
        from("${assets_dir}") {
            exclude('**/*.sh')
            exclude('**/*.R')
        }
        from('src/dist/main') {
            exclude('**/*.sh')
            exclude('**/*.R')
	}
        from("${assets_dir}") {
            include('**/*.sh')
            include('**/*.R')
            fileMode = 0775
	}
        from('src/dist/main') {
            include('**/*.sh')
            include('**/*.R')
            fileMode = 0775
	}
        from 'README.md'
        from 'LICENSE.EPL'
        from 'LICENSE.LGPL'
    }
    into("scripts/") {
        from "scripts/"
        exclude "build"
        exclude ".gradle"
    }
}


//set dependent tasks
dist.dependsOn getAssets

